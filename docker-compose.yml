version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: moviebuddies-postgres
    environment:
      POSTGRES_DB: moviebuddies
      POSTGRES_USER: moviebuddies
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d:ro
    networks:
      - moviebuddies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U moviebuddies -d moviebuddies"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: moviebuddies-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moviebuddies-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application (개발용)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: moviebuddies-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=moviebuddies
      - DB_USER=moviebuddies
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=mySecretKeyForJWTTokenGenerationThatShouldBeLongEnoughAndSecure
      - TMDB_API_KEY=${TMDB_API_KEY:-your_tmdb_api_key_here}
      - TZ=Asia/Seoul
    volumes:
      - ./backend/src:/app/src:ro # 소스 코드 핫 리로드용
      - app_uploads:/app/uploads
      - app_logs:/var/log/moviebuddies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moviebuddies-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 프론트엔드
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: moviebuddies-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #     - NEXT_PUBLIC_API_URL=http://localhost:8080
  #   volumes:
  #     - ./frontend:/app:ro
  #     - /app/node_modules
  #   depends_on:
  #     - backend
  #   networks:
  #     - moviebuddies-network
  #   restart: unless-stopped
