services:
  postgres:
    image: postgres:15-alpine
    container_name: moviebuddies-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-moviebuddies}
      POSTGRES_USER: ${POSTGRES_USER:-moviebuddies}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d:ro
      - ./backup:/backup
    networks:
      - moviebuddies-prod-network
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-moviebuddies} -d ${POSTGRES_DB:-moviebuddies}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    # 프로덕션에서는 포트 노출하지 않음 (보안)
    # ports를 제거하여 외부 접근 차단

  redis:
    image: redis:7-alpine
    container_name: moviebuddies-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - moviebuddies-prod-network
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: moviebuddies-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - moviebuddies-network
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moviebuddies-backend-prod
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - DB_URL=jdbc:postgresql://postgres:5432/${DB_NAME:-moviebuddies}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-moviebuddies}
      - DB_USER=${POSTGRES_USER:-moviebuddies}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - TMDB_API_KEY=${TMDB_API_KEY}
      - TZ=Asia/Seoul
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - FILE_UPLOAD_PATH=/app/uploads
      - LOG_FILE_PATH=/app/logs/application.log
    ports:
      - "8081:8080" # 백엔드 API 포트
    volumes:
      - app_prod_uploads:/app/uploads
      - app_prod_logs:/var/log/moviebuddies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - moviebuddies-prod-network
    restart: always
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 300s
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: "1.5"
        reservations:
          memory: 1G
          cpus: "1.0"
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"

  # 프론트엔드
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: moviebuddies-frontend-prod
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=http://localhost:8081
  #   ports:
  #     - "3001:3000"  # Frontend 포트 3001
  #   depends_on:
  #     - backend
  #   networks:
  #     - moviebuddies-prod-network
  #   restart: always

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: moviebuddies-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - moviebuddies-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: moviebuddies-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    networks:
      - moviebuddies-network
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  app_prod_uploads:
    driver: local
  app_prod_logs:
    driver: local
  prometheus_data: # Prometheus 영구 저장소
    driver: local
  grafana_data: # Grafana 영구 저장소
    driver: local
  nginx_logs:
    driver: local

networks:
  moviebuddies-prod-network:
    driver: bridge
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
